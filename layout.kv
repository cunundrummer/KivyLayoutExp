#  IMPORTANT notes!!!

#  checks python file first, does ALL '__init__(...).  Then does .kv file.
#  size, & pos controlled by layout.  (Makes sense?)
#  To control the size of a layout section automatically, use size_hint(val(0-1), val(0-1))
#  To control the size of a layout section manually, set size_hint(None, None), then the size (in dp?)
#  Setting the size_hint to None, makes a fixed size - can be set by user.
#  Double size layout on Y-axis would be size_hint(1, 2)
#  size_hint(.8, .2) is a proportion - 80% width, 20% height

<RotatedButton@Button>:
    canvas.before:
        PushMatrix
        Rotate:
            angle: 90
            origin: self.center
    canvas.after:
        PopMatrix

<GreenBtn@RotatedButton>:
    background_color: (0, 1, 0, 1)

<GreenCanvas@BoxLayout>:
    canvas:
        Color:
            rgba: (.15, .4, 0, 1)
        Rectangle:
            pos: self.pos
            size: self.size


<MasterLayout>:  # master layout
    BoxLayout:
        orientation: 'vertical'
        HeadSpace:
        MainContent:  # roulette board
            id: main_content

<HeadSpace@BoxLayout>:
    size_hint: (1, .1)
    pos_hint: {'top': 1}
    canvas:
        Color:
            rgba: (0, .230, .06, 1)
        Rectangle:
            pos: self.pos
            size: self.size

<MainContent@AnchorLayout>:
    anchor_x: 'center'
    anchor_y: 'top'
    BoxLayout:
        size_hint: (.75, .75)
        orientation: 'vertical'
        GreenCanvas:  # roulette board numbers
            pos_hint: {'center_x': .5}
            size_hint: (.75, .75)
            size_hint_y: 2
            id: numbers
        GreenCanvas:  # roulette board thirds
            size_hint_y: .2
        GreenCanvas:  # roulette board outsides

<NumbersLayout>:
    GridLayout:
        cols: 12
        rows: 3
        id: num_table_layout


#<Zeros>:
#    BoxLayout:
#        id: zeros_ref
#        orientation: 'vertical'
#        padding: [20, 0, 0, 0]
#
#<ZeroOnly>:
#    FloatLayout:
#        id: zero_only_ref
#        orientation: 'vertical'
##        pos: (0, 780+20 + (125*3)/3) # keep for 00 (0, 780+20 + (125*3)/2)
#        padding: [20, 0, 0, 0]
#        ColsBtn:
#            id: zero_btn
#            text: '0'
#            width: (125*3)/2
#            on_press: print('pressed zero_only', self.pos, root.pos, self.size)
#
#<DoubleZero>:
#    FloatLayout:
#        id: double_zero_ref
#        orientation: 'vertical'
#        padding: [20, 0, 0, 0]
#
#        ColsBtn:
#            id: dbl_zero_btn
#            text: '00'
#            width: (125*3)/2
#            on_press: print('pressed dbl zero', root.x, root.y, self.pos)
#
#
#<ThirdsBtn@Button>:
#    size_hint: (None, None)
#    height: 125
#    background_color: (0, 1, 0, 1)
#    width: 92*4  #780-450 + 40

#<OutsideLayout>
#    BoxLayout:
#        padding: [20, 20, 0, 0]
#        pos: (125, 780-250 + 19)
#        width: 92 * 12 + 20
#
#        OutBtn:
#            text: '1-18'
#        OutBtn:
#            text: 'Even'
#        OutBtn:
#            text: 'Red'
#            color: (1, 0, 0, 1)
#            bold: True
#        OutBtn:
#            text: 'Black'
#            color: (0, 0, 0, 1)
#            bold: True
#        OutBtn:
#            text: 'Odd'
#        OutBtn:
#            text: '19-36'

